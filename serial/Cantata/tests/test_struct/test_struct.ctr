===========================================================================
= Cantata Test Harness v9.5                                               =
= (c) 2021 QA Systems GmbH                                                =
=-------------------------------------------------------------------------=
= Test Description: struct                                                =
=    Configuration: x86-Win32-gcc8.2.0-bundled                            =
=     Test Started: Mon Feb 21 11:54:02 2022                              =
===========================================================================
------------------------- Start Test: test_serial_com

<Insert test case description here>

        Start Call Sequence Validation:

        PASSED: Function: mem_alloc
            Call Number: 1
            Instance: default

        PASSED: Function: disable_watchdog
            Call Number: 1
            Instance: default

        PASSED: Function: check_bus
            Call Number: 1
            Instance: default
        PASSED: Check: returnValue->dataIn[0] = 'U'
                value: 0x55    'U'
        PASSED: Check: pTest->dataIn[0] = 'm'
                value: 0x6D    'm'
        PASSED: Check Memory: ACCESS_VARIABLE(struct, _testArray)

        End Call Sequence Validation:

        PASSED: Function: mem_alloc
        PASSED: Function: disable_watchdog
        PASSED: Function: check_bus

------------------------- End Test: test_serial_com

------------------------- Start Test: test_serial_com_busKO

<Insert test case description here>

        Start Call Sequence Validation:

        PASSED: Function: mem_alloc
            Call Number: 1
            Instance: default

        PASSED: Function: disable_watchdog
            Call Number: 1
            Instance: default

        PASSED: Function: check_bus
            Call Number: 1
            Instance: busKO
        PASSED: Check: returnValue = NULL
                value: 0x00000000
        PASSED: Check Memory: ACCESS_VARIABLE(struct, _testArray)

        End Call Sequence Validation:

        PASSED: Function: mem_alloc
        PASSED: Function: disable_watchdog
        PASSED: Function: check_bus

------------------------- End Test: test_serial_com_busKO

------------------------- Start Test: COVERAGE RULE SET

ISO26262-6 2011 ASIL D unit level (HR)
GET_COVERAGE_MIN: entry point coverage (feasible only, including catch-clauses)
                  for "*" in context "*" = 100.0%

    PASSED: Check Range: 100% Entry Point Coverage
           actual: 100
            lower: 100
            upper: 100
GET_COVERAGE_MIN: statement coverage (feasible only, including catch-clauses)
                  for "*" in context "*" = 90.9%

>>  FAILED: Check Range: 100% Statement Coverage
           actual: 90.9
            lower: 100
            upper: 100
GET_COVERAGE_MIN: decision coverage (feasible only, including catch-clauses)
                  for "*" in context "*" = 83.3%

>>  FAILED: Check Range: 100% Decision Coverage
           actual: 83.3
            lower: 100
            upper: 100
GET_COVERAGE_MIN: boolean operand effectiveness (feasible only, including 
catch-clauses)
                  for "*" in context "*" = 0.0%

>>  FAILED: Check Range: 100% Boolean Operand Effectiveness Coverage
           actual: 0
            lower: 100
            upper: 100
-----------------------------------------------------------------------------
Coverage results for  entry point, statement, decision, boolean operand 
effectiveness, 
                 for "*" in context "*"
                 with executed and un-executed details
                 feasible only, including catch-clauses
-----------------------------------------------------------------------------
struct.c(34):check_bus()
entry point coverage details (with executed and un-executed cases)

struct.c(34):               entry   1                                       2

"check_bus"                                              executed           1
"check_bus"                                           un-executed           0
"check_bus"                                  entry point coverage      100.0%

struct.c(39):mem_alloc(size_t )
entry point coverage details (with executed and un-executed cases)

struct.c(39):               entry   1                                       2

"mem_alloc"                                              executed           1
"mem_alloc"                                           un-executed           0
"mem_alloc"                                  entry point coverage      100.0%

struct.c(45):serial_com(s_TEST_COM *)
entry point coverage details (with executed and un-executed cases)

struct.c(45):               entry   1                                       2

"serial_com"                                             executed           1
"serial_com"                                          un-executed           0
"serial_com"                                 entry point coverage      100.0%

struct.c(34):check_bus()
statement coverage details (with executed and un-executed cases)

struct.c(37):               stmnt   1 (return)                              2

"check_bus"                                              executed           1
"check_bus"                                           un-executed           0
"check_bus"                                    statement coverage      100.0%

struct.c(39):mem_alloc(size_t )
statement coverage details (with executed and un-executed cases)

struct.c(41):               stmnt   1 (return)                              2

"mem_alloc"                                              executed           1
"mem_alloc"                                           un-executed           0
"mem_alloc"                                    statement coverage      100.0%

struct.c(45):serial_com(s_TEST_COM *)
statement coverage details (with executed and un-executed cases)

struct.c(48):               stmnt   1 (declaration)                         2
struct.c(55):               stmnt   2 (other)                               2
struct.c(57):               stmnt   3 (cond)                                2
struct.c(57):               stmnt   4 (return)               >> NOT EXECUTED 
struct.c(57):               stmnt   5 (other)                               2
struct.c(58):               stmnt   6 (cond)                                2
struct.c(59):               stmnt   7 (loop)                                1
struct.c(59):               stmnt   8 (loop)                                3
struct.c(61):               stmnt   9 (other)                               3
struct.c(63):               stmnt  10 (return)                              1
struct.c(65):               stmnt  11 (return)                              1

"serial_com"                                             executed          10
"serial_com"                                          un-executed           1
"serial_com"                                   statement coverage       90.9%

struct.c(34):check_bus()
decision coverage details (with executed and un-executed cases)


"check_bus"                                              executed           0
"check_bus"                                           un-executed           0
"check_bus"                                     decision coverage      100.0%

struct.c(39):mem_alloc(size_t )
decision coverage details (with executed and un-executed cases)


"mem_alloc"                                              executed           0
"mem_alloc"                                           un-executed           0
"mem_alloc"                                     decision coverage      100.0%

struct.c(45):serial_com(s_TEST_COM *)
decision coverage details (with executed and un-executed cases)

struct.c(57):                decn   1 (if)     branch TRUE   >> NOT EXECUTED 
struct.c(57):                decn   1 (if)     branch FALSE                 2
struct.c(58):                decn   2 (if)     branch TRUE                  1
struct.c(65):                decn   2 (if)     branch FALSE                 1
struct.c(59):                decn   3 (for)    branch TRUE                  3
struct.c(59):                decn   3 (for)    branch FALSE                 1

"serial_com"                                             executed           5
"serial_com"                                          un-executed           1
"serial_com"                                    decision coverage       83.3%

struct.c(34):check_bus()
boolean operand effectiveness coverage details (with executed and un-executed 
cases)


"check_bus"                                             effective           0
"check_bus"                                         not effective           0
"check_bus"                                 boolean eff. coverage      100.0%

struct.c(39):mem_alloc(size_t )
boolean operand effectiveness coverage details (with executed and un-executed 
cases)


"mem_alloc"                                             effective           0
"mem_alloc"                                         not effective           0
"mem_alloc"                                 boolean eff. coverage      100.0%

struct.c(45):serial_com(s_TEST_COM *)
boolean operand effectiveness coverage details (with executed and un-executed 
cases)

struct.c(57):                expr   1 (A&&B)                                 
struct.c(57):                expr   1 A                      >> NOT EFFECTIVE
struct.c(57):                expr   1 B                      >> NOT EFFECTIVE

"serial_com"                                            effective           0
"serial_com"                                        not effective           2
"serial_com"                                boolean eff. coverage        0.0%

Summary by     EXECUTED     Overall                Statistics
Coverage type  INFEASIBLES  (wavg)     avg /    min /    max /    dev /   num
-----------------------------------------------------------------------------
entry point            0   100.0%   100.0% / 100.0% / 100.0% /   0.0% /     3
statement              0    92.3%    96.9% /  90.9% / 100.0% /   5.2% /     3
decision               0    83.3%    94.4% /  83.3% / 100.0% /   9.6% /     3
boolean eff.           0     0.0%    66.6% /   0.0% / 100.0% /  57.7% /     3
-----------------------------------------------------------------------------


------------------------- End Test: COVERAGE RULE SET

EXPORT_COVERAGE: coverage data written to "test_struct.cov"
Report on memory usage
    Peak memory used         : 8212 bytes
    Initial memory pool size : 16000 bytes
    Memory pool unused       : 7788 bytes
==============================================================================
= Test Finished: Mon Feb 21 11:54:02 2022                                    =
=----------------------------------------------------------------------------=
= Test                    Script  Checks  Checks  Checks  Call Seq     TEST  =
= Case                    Errors  Failed  Passed  Warned  Failures    RESULT =
=----------------------------------------------------------------------------=
= test_serial_com              0       0       3       0         0      PASS =
= test_serial_com_busKO        0       0       2       0         0      PASS =
= COVERAGE RULE SET            0       3       1       0         0   >> FAIL =
= Other                        0       0       0       0         0      PASS =
=----------------------------------------------------------------------------=
= TOTALS                       0       3       6       0         0   >> FAIL =
==============================================================================
