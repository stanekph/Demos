===========================================================================
= Cantata Test Harness v9.5                                               =
= (c) 2021 QA Systems GmbH                                                =
=-------------------------------------------------------------------------=
= Test Description: struct                                                =
=    Configuration: x86-Win32-gcc8.2.0-bundled                            =
=     Test Started: Mon Jan 03 22:19:23 2022                              =
===========================================================================
------------------------- Start Test: 1: check_bus

default case

    Start Call Sequence Validation:
        PASSED: Check: returnValue = READY
                value: 0
        PASSED: Check Memory: ACCESS_VARIABLE(struct, _testArray)

    End Call Sequence Validation:

    Call sequence matched: 


------------------------- End Test: 1: check_bus

------------------------- Start Test: 2: mem_alloc

default case

    Start Call Sequence Validation:
    Expected calls: malloc#1

        PASSED: Function: malloc
        PASSED: Instance: 1
        Call sequence matched so far: 
        malloc#1
        PASSED: Check: param_1 = 0U
                value: 0
        PASSED: Check: returnValue = NULL
                value: 0x00000000
        PASSED: Check Memory: ACCESS_VARIABLE(struct, _testArray)

    End Call Sequence Validation:

    Call sequence matched: 
    malloc#1

------------------------- End Test: 2: mem_alloc

------------------------- Start Test: 3: serial_com

default case

    Start Call Sequence Validation:
    Expected calls: mem_alloc#1;check_bus#1;disable_watchdog#1;
                    disable_watchdog#1;check_bus#1

        PASSED: Function: mem_alloc
        PASSED: Instance: 1
        Call sequence matched so far: 
        mem_alloc#1
        PASSED: Check: size = 4U
                value: 4

        PASSED: Function: check_bus
        PASSED: Instance: 1
        Call sequence matched so far: 
        mem_alloc#1;check_bus#1

        PASSED: Function: disable_watchdog
        PASSED: Instance: 1
        Call sequence matched so far: 
        mem_alloc#1;check_bus#1;disable_watchdog#1
        PASSED: Check: param = 0
                value: 0

        PASSED: Function: disable_watchdog
        PASSED: Instance: 1
        Call sequence matched so far: 
        mem_alloc#1;check_bus#1;disable_watchdog#1;disable_watchdog#1
        PASSED: Check: param = 0
                value: 0

        PASSED: Function: check_bus
        PASSED: Instance: 1
        Call sequence matched so far: 
        mem_alloc#1;check_bus#1;disable_watchdog#1;disable_watchdog#1;
        check_bus#1
        PASSED: Check: returnValue = &ACCESS_VARIABLE(struct, _testArray)[2]
                value: 0x0042C050
        PASSED: Check Memory: ACCESS_VARIABLE(struct, _testArray)

    End Call Sequence Validation:

    Call sequence matched: 
    mem_alloc#1;check_bus#1;disable_watchdog#1;disable_watchdog#1;check_bus#1

------------------------- End Test: 3: serial_com

------------------------- Start Test: 4: serial_com

created to solve false case of check_bus()==READY at line number 57

    Start Call Sequence Validation:
    Expected calls: mem_alloc#1;check_bus#1;disable_watchdog#1;
                    disable_watchdog#1;check_bus#2

        PASSED: Function: mem_alloc
        PASSED: Instance: 1
        Call sequence matched so far: 
        mem_alloc#1
        PASSED: Check: size = 4U
                value: 4

        PASSED: Function: check_bus
        PASSED: Instance: 1
        Call sequence matched so far: 
        mem_alloc#1;check_bus#1

        PASSED: Function: disable_watchdog
        PASSED: Instance: 1
        Call sequence matched so far: 
        mem_alloc#1;check_bus#1;disable_watchdog#1
        PASSED: Check: param = 0
                value: 0

        PASSED: Function: disable_watchdog
        PASSED: Instance: 1
        Call sequence matched so far: 
        mem_alloc#1;check_bus#1;disable_watchdog#1;disable_watchdog#1
        PASSED: Check: param = 0
                value: 0

        PASSED: Function: check_bus
        PASSED: Instance: 2
        Call sequence matched so far: 
        mem_alloc#1;check_bus#1;disable_watchdog#1;disable_watchdog#1;
        check_bus#2
        PASSED: Check: returnValue = NULL
                value: 0x00000000
        PASSED: Check Memory: ACCESS_VARIABLE(struct, _testArray)

    End Call Sequence Validation:

    Call sequence matched: 
    mem_alloc#1;check_bus#1;disable_watchdog#1;disable_watchdog#1;check_bus#2

------------------------- End Test: 4: serial_com

------------------------- Start Test: 5: serial_com

created to solve true case of disable_watchdog(0) at line number 56

    Start Call Sequence Validation:
    Expected calls: mem_alloc#1;check_bus#1;disable_watchdog#1;
                    disable_watchdog#2

        PASSED: Function: mem_alloc
        PASSED: Instance: 1
        Call sequence matched so far: 
        mem_alloc#1
        PASSED: Check: size = 4U
                value: 4

        PASSED: Function: check_bus
        PASSED: Instance: 1
        Call sequence matched so far: 
        mem_alloc#1;check_bus#1

        PASSED: Function: disable_watchdog
        PASSED: Instance: 1
        Call sequence matched so far: 
        mem_alloc#1;check_bus#1;disable_watchdog#1
        PASSED: Check: param = 0
                value: 0

        PASSED: Function: disable_watchdog
        PASSED: Instance: 2
        Call sequence matched so far: 
        mem_alloc#1;check_bus#1;disable_watchdog#1;disable_watchdog#2
        PASSED: Check: param = 0
                value: 0
        PASSED: Check: returnValue = NULL
                value: 0x00000000
        PASSED: Check Memory: ACCESS_VARIABLE(struct, _testArray)

    End Call Sequence Validation:

    Call sequence matched: 
    mem_alloc#1;check_bus#1;disable_watchdog#1;disable_watchdog#2

------------------------- End Test: 5: serial_com

------------------------- Start Test: 6: serial_com

created to solve false case of fl==NULL at line number 56

    Start Call Sequence Validation:
    Expected calls: mem_alloc#2;check_bus#1;disable_watchdog#1;
                    disable_watchdog#2;check_bus#1

        PASSED: Function: mem_alloc
        PASSED: Instance: 2
        Call sequence matched so far: 
        mem_alloc#2
        PASSED: Check: size = 4U
                value: 4

        PASSED: Function: check_bus
        PASSED: Instance: 1
        Call sequence matched so far: 
        mem_alloc#2;check_bus#1

        PASSED: Function: disable_watchdog
        PASSED: Instance: 1
        Call sequence matched so far: 
        mem_alloc#2;check_bus#1;disable_watchdog#1
        PASSED: Check: param = 0
                value: 0

        PASSED: Function: disable_watchdog
        PASSED: Instance: 2
        Call sequence matched so far: 
        mem_alloc#2;check_bus#1;disable_watchdog#1;disable_watchdog#2
        PASSED: Check: param = 0
                value: 0

        PASSED: Function: check_bus
        PASSED: Instance: 1
        Call sequence matched so far: 
        mem_alloc#2;check_bus#1;disable_watchdog#1;disable_watchdog#2;
        check_bus#1
        PASSED: Check: returnValue = &ACCESS_VARIABLE(struct, _testArray)[2]
                value: 0x0042C050
        PASSED: Check Memory: ACCESS_VARIABLE(struct, _testArray)

    End Call Sequence Validation:

    Call sequence matched: 
    mem_alloc#2;check_bus#1;disable_watchdog#1;disable_watchdog#2;check_bus#1

------------------------- End Test: 6: serial_com

------------------------- Start Test: 7: serial_com

created to solve false case of bst == READY at line number 52

    Start Call Sequence Validation:
    Expected calls: mem_alloc#1;check_bus#2;disable_watchdog#1;check_bus#1

        PASSED: Function: mem_alloc
        PASSED: Instance: 1
        Call sequence matched so far: 
        mem_alloc#1
        PASSED: Check: size = 4U
                value: 4

        PASSED: Function: check_bus
        PASSED: Instance: 2
        Call sequence matched so far: 
        mem_alloc#1;check_bus#2

        PASSED: Function: disable_watchdog
        PASSED: Instance: 1
        Call sequence matched so far: 
        mem_alloc#1;check_bus#2;disable_watchdog#1
        PASSED: Check: param = 0
                value: 0

        PASSED: Function: check_bus
        PASSED: Instance: 1
        Call sequence matched so far: 
        mem_alloc#1;check_bus#2;disable_watchdog#1;check_bus#1
        PASSED: Check: returnValue = &ACCESS_VARIABLE(struct, _testArray)[2]
                value: 0x0042C050
        PASSED: Check Memory: ACCESS_VARIABLE(struct, _testArray)

    End Call Sequence Validation:

    Call sequence matched: 
    mem_alloc#1;check_bus#2;disable_watchdog#1;check_bus#1

------------------------- End Test: 7: serial_com

------------------------- Start Test: COVERAGE RULE SET

DO-178B/C Level A
GET_COVERAGE_MIN: entry point coverage (feasible only, including catch-clauses)
                  for "*" in context "*" = 100.0%

    PASSED: Check Range: 100% Entry Point Coverage
           actual: 100
            lower: 100
            upper: 100
GET_COVERAGE_MIN: statement coverage (feasible only, including catch-clauses)
                  for "*" in context "*" = 100.0%

    PASSED: Check Range: 100% Statement Coverage
           actual: 100
            lower: 100
            upper: 100
GET_COVERAGE_MIN: decision coverage (feasible only, including catch-clauses)
                  for "*" in context "*" = 100.0%

    PASSED: Check Range: 100% Decision Coverage
           actual: 100
            lower: 100
            upper: 100
GET_COVERAGE_MIN: call-return coverage (feasible only, including catch-clauses)
                  for "*" in context "*" = 100.0%

    PASSED: Check Range: 100% Call Return Coverage
           actual: 100
            lower: 100
            upper: 100
GET_COVERAGE_MIN: boolean operand effectiveness (feasible only, including 
catch-clauses)
                  for "*" in context "*" = 100.0%

    PASSED: Check Range: 100% Boolean Operand Effectiveness Coverage
           actual: 100
            lower: 100
            upper: 100
-----------------------------------------------------------------------------
Coverage results for  entry point, call-return, statement, decision, boolean 
operand effectiveness, 
                 for "*" in context "*"
                 with executed and un-executed details
                 feasible only, including catch-clauses
-----------------------------------------------------------------------------
struct.c(34):check_bus()
entry point coverage details (with executed and un-executed cases)

struct.c(34):               entry   1                                       1

"check_bus"                                              executed           1
"check_bus"                                           un-executed           0
"check_bus"                                  entry point coverage      100.0%

struct.c(39):mem_alloc(size_t )
entry point coverage details (with executed and un-executed cases)

struct.c(39):               entry   1                                       1

"mem_alloc"                                              executed           1
"mem_alloc"                                           un-executed           0
"mem_alloc"                                  entry point coverage      100.0%

struct.c(45):serial_com(s_TEST_COM *)
entry point coverage details (with executed and un-executed cases)

struct.c(45):               entry   1                                       5

"serial_com"                                             executed           1
"serial_com"                                          un-executed           0
"serial_com"                                 entry point coverage      100.0%

struct.c(34):check_bus()
call-return coverage details (with executed and un-executed cases)


"check_bus"                                              executed           0
"check_bus"                                           un-executed           0
"check_bus"                                  call-return coverage      100.0%

struct.c(39):mem_alloc(size_t )
call-return coverage details (with executed and un-executed cases)

struct.c(41):                call   1 (global-fn)                           1

"mem_alloc"                                              executed           1
"mem_alloc"                                           un-executed           0
"mem_alloc"                                  call-return coverage      100.0%

struct.c(45):serial_com(s_TEST_COM *)
call-return coverage details (with executed and un-executed cases)

struct.c(48):                call   1 (global-fn)                           5
struct.c(52):                call   2 (global-fn)                           5
struct.c(53):                call   3 (global-fn)                           4
struct.c(57):                call   4 (global-fn)                           5
struct.c(58):                call   5 (global-fn)                           4

"serial_com"                                             executed           5
"serial_com"                                          un-executed           0
"serial_com"                                 call-return coverage      100.0%

struct.c(34):check_bus()
statement coverage details (with executed and un-executed cases)

struct.c(37):               stmnt   1 (return)                              1

"check_bus"                                              executed           1
"check_bus"                                           un-executed           0
"check_bus"                                    statement coverage      100.0%

struct.c(39):mem_alloc(size_t )
statement coverage details (with executed and un-executed cases)

struct.c(41):               stmnt   1 (return)                              1

"mem_alloc"                                              executed           1
"mem_alloc"                                           un-executed           0
"mem_alloc"                                    statement coverage      100.0%

struct.c(45):serial_com(s_TEST_COM *)
statement coverage details (with executed and un-executed cases)

struct.c(48):               stmnt   1 (declaration)                         5
struct.c(52):               stmnt   2 (other)                               5
struct.c(53):               stmnt   3 (cond)                                5
struct.c(53):               stmnt   4 (other)                               4
struct.c(57):               stmnt   5 (cond)                                5
struct.c(57):               stmnt   6 (return)                              1
struct.c(57):               stmnt   7 (other)                               4
struct.c(58):               stmnt   8 (cond)                                4
struct.c(59):               stmnt   9 (loop)                                3
struct.c(59):               stmnt  10 (loop)                                9
struct.c(61):               stmnt  11 (other)                               9
struct.c(63):               stmnt  12 (return)                              3
struct.c(65):               stmnt  13 (return)                              1

"serial_com"                                             executed          13
"serial_com"                                          un-executed           0
"serial_com"                                   statement coverage      100.0%

struct.c(34):check_bus()
decision coverage details (with executed and un-executed cases)


"check_bus"                                              executed           0
"check_bus"                                           un-executed           0
"check_bus"                                     decision coverage      100.0%

struct.c(39):mem_alloc(size_t )
decision coverage details (with executed and un-executed cases)


"mem_alloc"                                              executed           0
"mem_alloc"                                           un-executed           0
"mem_alloc"                                     decision coverage      100.0%

struct.c(45):serial_com(s_TEST_COM *)
decision coverage details (with executed and un-executed cases)

struct.c(53):                decn   1 (if)     branch TRUE                  4
struct.c(53):                decn   1 (if)     branch FALSE                 1
struct.c(57):                decn   2 (if)     branch TRUE                  1
struct.c(57):                decn   2 (if)     branch FALSE                 4
struct.c(58):                decn   3 (if)     branch TRUE                  3
struct.c(65):                decn   3 (if)     branch FALSE                 1
struct.c(59):                decn   4 (for)    branch TRUE                  9
struct.c(59):                decn   4 (for)    branch FALSE                 3

"serial_com"                                             executed           8
"serial_com"                                          un-executed           0
"serial_com"                                    decision coverage      100.0%

struct.c(34):check_bus()
boolean operand effectiveness coverage details (with executed and un-executed 
cases)


"check_bus"                                             effective           0
"check_bus"                                         not effective           0
"check_bus"                                 boolean eff. coverage      100.0%

struct.c(39):mem_alloc(size_t )
boolean operand effectiveness coverage details (with executed and un-executed 
cases)


"mem_alloc"                                             effective           0
"mem_alloc"                                         not effective           0
"mem_alloc"                                 boolean eff. coverage      100.0%

struct.c(45):serial_com(s_TEST_COM *)
boolean operand effectiveness coverage details (with executed and un-executed 
cases)

struct.c(57):                expr   1 (A&&B)                                 
struct.c(57):                expr   1 A                             effective
struct.c(57):                expr   1 B                             effective

"serial_com"                                            effective           2
"serial_com"                                        not effective           0
"serial_com"                                boolean eff. coverage      100.0%

Summary by     EXECUTED     Overall                Statistics
Coverage type  INFEASIBLES  (wavg)     avg /    min /    max /    dev /   num
-----------------------------------------------------------------------------
entry point            0   100.0%   100.0% / 100.0% / 100.0% /   0.0% /     3
call-return            0   100.0%   100.0% / 100.0% / 100.0% /   0.0% /     3
statement              0   100.0%   100.0% / 100.0% / 100.0% /   0.0% /     3
decision               0   100.0%   100.0% / 100.0% / 100.0% /   0.0% /     3
boolean eff.           0   100.0%   100.0% / 100.0% / 100.0% /   0.0% /     3
-----------------------------------------------------------------------------


------------------------- End Test: COVERAGE RULE SET

EXPORT_COVERAGE: coverage data written to "atest_struct.cov"
Report on memory usage
    Peak memory used         : 9828 bytes
    Initial memory pool size : 32000 bytes
    Memory pool unused       : 22172 bytes
===========================================================================
= Test Finished: Mon Jan 03 22:19:24 2022                                 =
=-------------------------------------------------------------------------=
= Test                 Script  Checks  Checks  Checks  Call Seq     TEST  =
= Case                 Errors  Failed  Passed  Warned  Failures    RESULT =
=-------------------------------------------------------------------------=
= 1: check_bus              0       0       2       0         0      PASS =
= 2: mem_alloc              0       0       3       0         0      PASS =
= 3: serial_com             0       0       5       0         0      PASS =
= 4: serial_com             0       0       5       0         0      PASS =
= 5: serial_com             0       0       5       0         0      PASS =
= 6: serial_com             0       0       5       0         0      PASS =
= 7: serial_com             0       0       4       0         0      PASS =
= COVERAGE RULE SET         0       0       5       0         0      PASS =
= Other                     0       0       0       0         0      PASS =
=-------------------------------------------------------------------------=
= TOTALS                    0       0      34       0         0      PASS =
===========================================================================
